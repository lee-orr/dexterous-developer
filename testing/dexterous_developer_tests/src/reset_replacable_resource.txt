use bevy::prelude::*;
use dexterous_developer::*;
use serde::{Deserialize, Serialize};

use crate::shared::StdInput;

fn update(mut text: ResMut<TextResource>, input: Res<StdInput>) {
    let input = &input.0;
    if input.is_empty() {
        let text = text.0.as_str();
        println!("Got: {text}");
    } else {
        let t = format!("{} {input}", text.0);
        println!("Updated: {t}");
        text.0 = t;
    }
}

fn startup() {
    println!("Press Enter to Progress, or type 'exit' to exit");
}
pub struct MyPlugin;

impl Plugin for MyPlugin {
    fn build(&self, app: &mut App) {
    app.add_systems(Startup, startup)
        .add_systems(Update, update)
        .reset_resource::<TextResource, _>();
}
}

#[derive(Component, Serialize, Deserialize, Default)]
struct TextComponent(String);

impl ReplacableComponent for TextComponent {
    fn get_type_name() -> &'static str {
        "text_component"
    }
}

#[derive(Resource, Serialize, Deserialize)]
struct TextResource(String);

impl Default for TextResource {
    fn default() -> Self {
        Self("Resource Replaced".to_string())
    }
}

impl ReplacableResource for TextResource {
    fn get_type_name() -> &'static str {
        "text_resource"
    }
}
