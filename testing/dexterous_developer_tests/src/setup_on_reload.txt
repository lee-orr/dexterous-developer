use bevy::prelude::{Commands, Component, PreUpdate, Query, Res, Resource, Startup, Update};
use dexterous_developer::*;
use serde::{Deserialize, Serialize};

use crate::shared::StdInput;

fn update(texts: Query<&TextComponent>) {
    if texts.is_empty() {
        println!("No components");
        return;
    }
    let mut texts = texts.iter().map(|v| v.content.clone()).collect::<Vec<_>>();
    texts.sort();
    let text = texts.join(", ");
    println!("Components: {text}");
}

fn startup() {
    println!("Press Enter to Progress, or type 'exit' to exit");
}

fn spawn_texts(input: Res<StdInput>, mut commands: Commands) {
    let text = input.0.as_str();
    if text.is_empty() {
        return;
    }

    commands.spawn(TextComponent {
        content: text.to_string(),
    });
}

fn setup(mut commands: Commands) {
    commands.spawn(TextComponent { content: "a_thing".to_string()});
}

#[dexterous_developer_setup]
pub fn reloadable(app: &mut ReloadableAppContents) {
    app.add_systems(Startup, startup)
        .add_systems(PreUpdate, spawn_texts)
        .add_systems(Update, update)
        .reset_setup::<TextComponent, _>(setup);
}

#[derive(Component, Serialize, Deserialize, Default)]
struct TextComponent {
    content: String,
}

impl ReplacableComponent for TextComponent {
    fn get_type_name() -> &'static str {
        "text_component"
    }
}

#[derive(Resource, Serialize, Deserialize, Default)]
struct TextResource(String);

impl ReplacableResource for TextResource {
    fn get_type_name() -> &'static str {
        "text_resource"
    }
}

